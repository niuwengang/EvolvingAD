// static bool is_gnss_init = false;

// {

//     double time_delta = cur_cloud_msg_.time_stamp - cur_imu_msg_.time_stamp;

//     if (time_delta > 0.05) // 点云早于imu gnss
//     {
//         imu_msg_queue_.pop_front();
//         gnss_msg_queue_.pop_front();
//     }
//     else if (time_delta < -0.05) // 点云晚于 imu gnss
//     {
//         cloud_msg_queue_.pop_front();
//     }
//     else // 近似对齐
//     {
//         cloud_msg_queue_.pop_front();
//         imu_msg_queue_.pop_front();
//         gnss_msg_queue_.pop_front();

//         if (is_gnss_init == false)
//         {
//             cur_gnss_msg_.PosInit();
//             gnss_pub_ptr_->Publish(cur_gnss_msg_);
//             std::cout << "坐标点:" << cur_gnss_msg_.longitude << " " << cur_gnss_msg_.latitude << std::endl;
//             is_gnss_init = true;
//         }
//         gnss_to_map_ = Eigen::Matrix4f::Identity();
//         gnss_to_map_.block<3, 1>(0, 3) = cur_gnss_msg_.OdomUpdate();
//         gnss_to_map_.block<3, 3>(0, 0) = cur_imu_msg_.GetOrientationMatrix();

//         lidar_to_map_ = gnss_to_map_ * paramlist_ptr_->imu_to_body.inverse() * paramlist_ptr_->lidar_to_body;

//         pcl::transformPointCloud(*cur_cloud_msg_.cloud_ptr, *cur_cloud_msg_.cloud_ptr, lidar_to_map_);

//         cloud_pub_ptr_->Publish(cur_cloud_msg_.cloud_ptr);
//         lidar_odom_pub_ptr_->Publish(lidar_to_map_);
//         body_tf_pub_ptr_->SendTransform(lidar_to_map_);
//         // body_odom_pub_ptr_->Publish(lidar_to_map_); // 近似认为车体即lidar
//     }
// }

// static int imu_init_flag = false;
// static int gnss_init_flag = false;

// if (read_imu_flag == true && imu_init_flag == false)
// {
//     lidar_odom_init_pose_.block<3, 3>(0, 0) =
//         paramlist_ptr_->body_to_lidar.block<3, 3>(0, 0).inverse() * cur_imu_msg_.GetOrientationMatrix();

//     imu_init_flag = true;
// }

// if (read_gnss_flag == true)
// {
//     if (gnss_init_flag == false)
//     {
//         cur_gnss_msg_.PosInit();
//         gnss_init_flag = true;
//     }
//     else
//     {
//         gnss_odom_.block<3, 1>(0, 3) = cur_gnss_msg_.OdomUpdate();
//         gnss_odom_pub_ptr_->Publish(gnss_odom_);
//     }
// }

// if (read_cloud_flag == true)
// {
//     time_ptr_->Start();
//     UpdateLidarOdom(cur_cloud_msg_, lidar_odom_);

//     cloud_pub_ptr_->Publish(local_map_ptr_);
//     Eigen::Matrix3f tmp;
//     tmp << -1, 0, 0, 0, -1, 0, 0, 0, 1;
//     lidar_odom_.block<3, 3>(0, 0) = tmp * lidar_odom_.block<3, 3>(0, 0);
//     body_odom_pub_ptr_->Publish(lidar_odom_);
//     veh_tf_pub_ptr_->SendTransform(lidar_odom_);

//     log_ptr_->terminal_->info("频率:{}", time_ptr_->End());
// }
// if (read_cloud_flag == true && read_gnss_flag == true && read_imu_flag == true)
// {
//     log_ptr_->terminal_->info("时间戳:{}", cur_cloud_msg_.time_stamp);
// }
// }



/**
 * @brief 读取消息(简单取最近邻)
 * @param[in] none
 * @return
 */
void OdomPipe::ReadMsg(bool &valid_cloud_flag, bool &valid_imu_flag, bool &valid_gnss_flag)
{
    cloud_sub_ptr_->ParseData(cloud_msg_queue_); // 获取数据
    gnss_sub_ptr_->ParseData(gnss_msg_queue_);   // 获取数据
    imu_sub_ptr_->ParseData(imu_msg_queue_);     // 获取数据

    valid_gnss_flag = valid_imu_flag = valid_cloud_flag = false;

    if (!cloud_msg_queue_.empty())
    {
        cur_cloud_msg_ = cloud_msg_queue_.front();
        cloud_msg_queue_.pop_front();
        valid_cloud_flag = true;
        const double time_sync_refer = cur_cloud_msg_.time_stamp;

        if (!imu_msg_queue_.empty())
        {
            auto imu_pos = std::min_element(
                imu_msg_queue_.begin(), imu_msg_queue_.end(), [time_sync_refer](ImuMsg imu_msg_1, ImuMsg imu_msg_2) {
                    return abs(imu_msg_1.time_stamp - time_sync_refer) < abs(imu_msg_2.time_stamp - time_sync_refer);
                });

            if (abs((*imu_pos).time_stamp - time_sync_refer) < 0.1)
            {
                imu_msg_queue_.erase(imu_msg_queue_.begin(), imu_pos);
                cur_imu_msg_ = imu_msg_queue_.front();
                imu_msg_queue_.pop_front();
                valid_imu_flag = true;
                // log_ptr_->terminal_->info("imu近似同步");
                // log_ptr_->terminal_->info("imu队列长度{}", imu_msg_queue_.size());
            }
        }

        if (!gnss_msg_queue_.empty())
        {

            auto gnss_pos = std::min_element(gnss_msg_queue_.begin(), gnss_msg_queue_.end(),
                                             [time_sync_refer](GnssMsg gnss_msg_1, GnssMsg gnss_msg_2) {
                                                 return abs(gnss_msg_1.time_stamp - time_sync_refer) <
                                                        abs(gnss_msg_2.time_stamp - time_sync_refer);
                                             });
            if (abs((*gnss_pos).time_stamp - time_sync_refer) < 0.1)
            {
                gnss_msg_queue_.erase(gnss_msg_queue_.begin(), gnss_pos);
                cur_gnss_msg_ = gnss_msg_queue_.front();
                gnss_msg_queue_.pop_front();
                valid_gnss_flag = true;
                // log_ptr_->terminal_->info("gnss近似同步");
                // log_ptr_->terminal_->info("gnss队列长度{}", gnss_msg_queue_.size());
            }
        }
    }
}